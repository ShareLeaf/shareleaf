/* tslint:disable */
/* eslint-disable */
/**
 * ShareLeaf API Service
 * REST API for ShareLeaf backend services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SLContentId
 */
export interface SLContentId {
    /**
     * 
     * @type {string}
     * @memberof SLContentId
     */
    uid: string;
}
/**
 * 
 * @export
 * @interface SLContentMetadata
 */
export interface SLContentMetadata {
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    shareable_link: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    thumbnail: string;
    /**
     * 
     * @type {SLMediaType}
     * @memberof SLContentMetadata
     */
    media_type: SLMediaType;
    /**
     * 
     * @type {boolean}
     * @memberof SLContentMetadata
     */
    processed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SLContentMetadata
     */
    invalid_url: boolean;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    encoding: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof SLContentMetadata
     */
    category: string;
    /**
     * 
     * @type {number}
     * @memberof SLContentMetadata
     */
    view_count: number;
    /**
     * 
     * @type {number}
     * @memberof SLContentMetadata
     */
    like_count: number;
    /**
     * 
     * @type {number}
     * @memberof SLContentMetadata
     */
    share_count: number;
    /**
     * 
     * @type {number}
     * @memberof SLContentMetadata
     */
    dislike_count: number;
    /**
     * 
     * @type {number}
     * @memberof SLContentMetadata
     */
    created_dt: number;
    /**
     * 
     * @type {boolean}
     * @memberof SLContentMetadata
     */
    error: boolean;
}
/**
 * 
 * @export
 * @interface SLContentUrl
 */
export interface SLContentUrl {
    /**
     * 
     * @type {string}
     * @memberof SLContentUrl
     */
    url: string;
}
/**
 * 
 * @export
 * @interface SLGenericResponse
 */
export interface SLGenericResponse {
    /**
     * 
     * @type {string}
     * @memberof SLGenericResponse
     */
    status?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SLGenericResponse
     */
    error?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SLMediaType {
    VIDEO = 'video',
    IMAGE = 'image',
    GIF = 'gif',
    AUDIO = 'audio'
}


/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a unique content id
         * @summary Generate content id
         * @param {SLContentUrl} sLContentUrl Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateContentId: async (sLContentUrl: SLContentUrl, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sLContentUrl' is not null or undefined
            assertParamExists('generateContentId', 'sLContentUrl', sLContentUrl)
            const localVarPath = `/content/generate-uid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sLContentUrl, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get content metadata
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getMetadata', 'uid', uid)
            const localVarPath = `/content/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Increment share count
         * @summary Increment share count
         * @param {SLContentId} sLContentId Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementShareCount: async (sLContentId: SLContentId, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sLContentId' is not null or undefined
            assertParamExists('incrementShareCount', 'sLContentId', sLContentId)
            const localVarPath = `/content/shares`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sLContentId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a unique content id
         * @summary Generate content id
         * @param {SLContentUrl} sLContentUrl Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateContentId(sLContentUrl: SLContentUrl, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SLContentMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateContentId(sLContentUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get content metadata
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SLContentMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadata(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Increment share count
         * @summary Increment share count
         * @param {SLContentId} sLContentId Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incrementShareCount(sLContentId: SLContentId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SLGenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incrementShareCount(sLContentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * Generate a unique content id
         * @summary Generate content id
         * @param {SLContentUrl} sLContentUrl Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateContentId(sLContentUrl: SLContentUrl, options?: any): AxiosPromise<SLContentMetadata> {
            return localVarFp.generateContentId(sLContentUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * Get content metadata
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(uid: string, options?: any): AxiosPromise<SLContentMetadata> {
            return localVarFp.getMetadata(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Increment share count
         * @summary Increment share count
         * @param {SLContentId} sLContentId Content URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incrementShareCount(sLContentId: SLContentId, options?: any): AxiosPromise<SLGenericResponse> {
            return localVarFp.incrementShareCount(sLContentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * Generate a unique content id
     * @summary Generate content id
     * @param {SLContentUrl} sLContentUrl Content URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public generateContentId(sLContentUrl: SLContentUrl, options?: any) {
        return ContentApiFp(this.configuration).generateContentId(sLContentUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get content metadata
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public getMetadata(uid: string, options?: any) {
        return ContentApiFp(this.configuration).getMetadata(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Increment share count
     * @summary Increment share count
     * @param {SLContentId} sLContentId Content URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public incrementShareCount(sLContentId: SLContentId, options?: any) {
        return ContentApiFp(this.configuration).incrementShareCount(sLContentId, options).then((request) => request(this.axios, this.basePath));
    }
}


