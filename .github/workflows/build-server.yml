#**********************************************************************
# Build and Deploy ShareLeaf
#**********************************************************************

name: ShareLeaf Server | Prod
on:
  pull_request:
    branches: [ release ]
    types: [closed]
    paths:
      - "server/**"
env:
#  SHARELEAF_DATASOURCE_USERNAME: ${{ secrets.SHARELEAF_DATASOURCE_USERNAME }}
#  SHARELEAF_DATASOURCE_PASSWORD: ${{ secrets.SHARELEAF_DATASOURCE_PASSWORD }}
#  SHARELEAF_DATASOURCE_URL: ${{ secrets.SHARELEAF_DATASOURCE_URL }}
  SHARELEAF_DATASOURCE_USERNAME: shareleaf
  SHARELEAF_DATASOURCE_PASSWORD: shareleaf
  SHARELEAF_DATASOURCE_URL: '18.222.71.85:7432/content'
  SHARELEAF_AWS_BUCKET_NAME: shareleaf
  SHARELEAF_AWS_CDN: 'https://d1x2gijf3bj73j.cloudfront.net'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PYTHONUNBUFFERED: TRUE
  FLASK_APP: 'app.py'
  FLASK_RUN_HOST: '0.0.0.0'
  AWS_REGION_US: 'us-east-2'
  AWS_ECR_REGISTRY: '537408061242.dkr.ecr.us-east-2.amazonaws.com'
  AWS_ECR_REPO: 'shareleaf'
  IMAGE_TAG: 'shareleaf-prod-server-latest'
  PROJECT_NAME: 'server'
  ARTIFACT_PATH: 'covalent/build'
jobs:
  build:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_US }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create a Dockerfile
        run: |
          cd ${{ env.PROJECT_NAME }}
          rm -rf Dockerfile
          touch Dockerfile

          echo FROM borda/docker_python-opencv-ffmpeg >> Dockerfile
          echo WORKDIR /usr/app/server >> Dockerfile
          echo ENV PYTHONUNBUFFERED=${{ env.PYTHONUNBUFFERED }} >> Dockerfile
          echo ENV FLASK_APP=${{ env.FLASK_APP }} >> Dockerfile
          echo ENV FLASK_RUN_HOST=${{ env.FLASK_RUN_HOST }} >> Dockerfile
          echo ENV SHARELEAF_AWS_BUCKET_NAME=${{ env.SHARELEAF_AWS_BUCKET_NAME }} >> Dockerfile
          echo ENV SHARELEAF_AWS_CDN=${{ env.SHARELEAF_AWS_CDN }} >> Dockerfile
          echo ENV SHARELEAF_AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} >> Dockerfile
          echo ENV SHARELEAF_AWS_SECRET_KEY_ID=${{ env.AWS_SECRET_ACCESS_KEY }} >> Dockerfile
          echo ENV SHARELEAF_DATASOURCE_USERNAME=${{ env.SHARELEAF_DATASOURCE_USERNAME }} >> Dockerfile
          echo ENV SHARELEAF_DATASOURCE_PASSWORD=${{ env.SHARELEAF_DATASOURCE_PASSWORD }} >> Dockerfile
          echo ENV SHARELEAF_DATASOURCE_URL=${{ env.SHARELEAF_DATASOURCE_URL }} >> Dockerfile
          echo COPY ./ ./ >> Dockerfile
          echo RUN pip install --upgrade pip >> Dockerfile
          echo RUN pip install -r requirements.txt >> Dockerfile
          echo EXPOSE 5000 >> Dockerfile
          echo CMD ["\"gunicorn\"", "\"--preload\"", "\"--bind\"", "\"0.0.0.0:5000\"", "\"-w\"", "\"3\"", "\"app:app\""] >> Dockerfile

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.AWS_ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_REPO }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd ${{ env.PROJECT_NAME }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - run: mkdir -p ${{ env.ARTIFACT_PATH }}
      - run: echo ${{ steps.build-image.outputs.image }} > ${{ env.ARTIFACT_PATH }}/${{ env.IMAGE_TAG }}.txt
      - uses: actions/upload-artifact@v2
        with:
          name: image-tag
          path: ${{ env.ARTIFACT_PATH }}/${{ env.IMAGE_TAG }}.txt