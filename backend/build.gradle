plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.10"
    id 'org.openapi.generator' version '5.1.1'
    id "org.flywaydb.flyway" version "7.15.0"
    id 'jacoco'
    id 'groovy'
}

allprojects {
    apply plugin: "idea"
    apply plugin: 'java'
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url "https://plugins.gradle.org/m2/" }

    }
}

bootJar {
    enabled = false
}

ext {
    set('springCloudVersion', "2020.0.3")
    set('awsSDKVersion', '1.12.65')
    set("apiPackageName", "com.resumerepo.api")
    set("modelPackageName", "com.resumerepo.model")
    set("openApiSpecPath", "src/main/resources/openapi/openapi.json")
    set("generatedDirSpring", "generated/openapi/spring")
    set("generatedDirTypeScript", "generated/openapi/typescript")
    set("apiVersion", "1.0.0")
}

/**
 * Configure Java/Spring Boot projects
 */
configure(subprojects.findAll(it ->
        it.file('src/main/java').exists()
)) {
    group = 'co.shareleaf'
    version = '1.0.0'
    sourceCompatibility = '16'
    targetCompatibility = '16'

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java-library'
    apply plugin: 'application'
    apply plugin: 'jacoco'
    apply plugin: 'org.openapi.generator'
    apply plugin: 'io.swagger.core.v3.swagger-gradle-plugin'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-undertow:2.7.0'
        implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        testImplementation 'io.projectreactor:reactor-test'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation 'io.springfox:springfox-swagger2:3.0.0'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'
        implementation 'io.r2dbc:r2dbc-postgresql:0.8.12.RELEASE'
        implementation 'org.postgresql:postgresql:42.2.23'
        implementation platform("com.amazonaws:aws-java-sdk-bom:${awsSDKVersion}")
        implementation 'javax.servlet:javax.servlet-api:4.0.1'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        annotationProcessor 'org.projectlombok:lombok:1.18.22'
        testCompileOnly 'org.projectlombok:lombok:1.18.22'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
        testImplementation 'org.testng:testng:7.4.0'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [

        ]
    }

    test {
        useTestNG {
            preserveOrder true
        }
        systemProperties = [
                'spring.profiles.active'       : System.getProperty('SPRING_PROFILES_ACTIVE'),
                'spring.application.name'      : System.getProperty('SPRING_APPLICATION_NAME'),
                'RR_SSH_KEY_B64'               : System.getProperty('RR_SSH_KEY_B64')
        ]
        reports.html.required = true
        reports.junitXml.required = false
    }

    run {
        systemProperties = [
                'spring.profiles.active'       : System.getProperty('SPRING_PROFILES_ACTIVE'),
                'spring.application.name'      : System.getProperty('SPRING_APPLICATION_NAME'),
                'RR_SSH_KEY_B64'               : System.getProperty('RR_SSH_KEY_B64')
        ]
    }

    jar {
        enabled = false
    }
    bootJar {
        enabled = true
        archiveFileName = "app.${archiveExtension.get()}"
        launchScript()
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = false
            csv.required = false
            html.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

/**
 * Generate OpenApi stubs for Spring and TypeScript
 */
task openApiBuilder() {
    def childProjects = getChildProjects()
    def services = [
            "shareleaf-api" : [
                    clientApi: true,
                    serverApi: true
            ]
    ]
    for (Map.Entry<String, Project> entry : childProjects.entrySet()) {
        def serviceName = entry.getKey()
        def openApiSpecPath = "$rootDir/$serviceName/$project.openApiSpecPath" as String
        def generatedSourcesDirSpring = "$rootDir/$serviceName/build/$project.generatedDirSpring" as String
        def generatedSourcesDirTypeScript = "$rootDir/$serviceName/build/$project.generatedDirTypeScript" as String
        def generatedTargetsDirTypesScript ="$rootDir/build/openapi-ts" as String

        def projectTasks = entry.getValue().tasks
        if (services.containsKey(serviceName)) {
            projectTasks.register('openApiGenerateSpringServer',
                    org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
                generatorName = "spring"
                inputSpec = openApiSpecPath
                outputDir = generatedSourcesDirSpring
                apiPackage = project.apiPackageName
                modelPackage = project.modelPackageName
                configOptions = [
                        interfaceOnly          : "true",
                        invoker                : "false",
                        generateSupportingFiles: "false",
                        serializableModel      : "true",
                        swaggerAnnotations     : "false",
                        gradleBuildFile        : "false",
                        useTags                : "true"
                ]
            }
            projectTasks.getByName('compileJava')
                    .dependsOn('openApiGenerateSpringServer')

            boolean generateClientApi = services.get(serviceName).get("clientApi")
            if (generateClientApi) {
                projectTasks.register('openApiGenerateTypeScriptClient',
                        org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
                    generatorName = "typescript-axios"
                    inputSpec = openApiSpecPath
                    outputDir = generatedSourcesDirTypeScript
                }

                projectTasks.register('openApiTypeScriptClientZip', Zip) {
                    dependsOn('openApiGenerateTypeScriptClient')
                    from generatedSourcesDirTypeScript
                    include '**/*.ts'
                    archiveName 'openapi_ts.zip'
                    destinationDir(file(generatedTargetsDirTypesScript))
                }

                projectTasks.getByName('compileJava')
                        .dependsOn('openApiTypeScriptClientZip')
                        .dependsOn('openApiGenerateTypeScriptClient')
            }
        }
    }
}
tasks.getByName('compileJava').dependsOn('openApiBuilder')